name: Deploy para GCP via gcloud

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Deploy
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Criar secret.json
        run: |
          cat <<EOF > secret.json
          {
            "email": {
              "service_id": "${{ secrets.SERVICE_ID }}",
              "template_id": "${{ secrets.TEMPLATE_ID }}",
              "public_key": "${{ secrets.PUBLIC_KEY }}",
              "to_email": "raingredi.efg@gmail.com"
            },
            "turmas": {
              "estatistica": { "senha": "${{ secrets.SENHA_EST }}" },
              "terceirao": { "senha": "${{ secrets.SENHA_TERCEIRAO }}" },
              "logica": { "senha": "${{ secrets.SENHA_LOGICA }}" },
              "visualizacao_dados": { "senha": "${{ secrets.SENHA_VISUALIZACAO_DADOS }}" }
            }
          }
          EOF

      - name: Listar arquivos no diretório
        run: ls -la ./

      # ---------- 0. Pré-processar Markdown para Mermaid ----------
      - name: Injetar Mermaid nos arquivos Markdown
        run: |
          set -euo pipefail

          for file in $(find ./turmas -type f -name "*.md"); do
            if grep -q "mermaid" "$file"; then
              echo "Processando $file"
              second_delim_line=$(grep -n '^---' "$file" | sed -n '2p' | cut -d: -f1)
              if [ -n "$second_delim_line" ]; then
                tmp_file=$(mktemp)
                head -n "$second_delim_line" "$file" > "$tmp_file"
          cat <<'EOF' >> "$tmp_file"
          <!-- Include mermaid support -->
          <script type="module">
            import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
            mermaid.initialize({
              startOnLoad: true,
              theme: 'base',
              themeVariables: {
                primaryColor: '#f4f6fb',
                primaryTextColor: '#2b2b2b',
                primaryBorderColor: '#1a3a6e',

                lineColor: '#1a3a6e',
                secondaryColor: '#e8ebf7',
                tertiaryColor: '#d62828',

                fontFamily: 'Roboto, sans-serif',
                fontSize: '16px',
                edgeLabelBackground: '#afbae3',

                nodeTextColor: '#2b2b2b',
                clusterBkg: '#f4f6fb',
                clusterBorder: '#1a3a6e',

                titleColor: '#1a3a6e',
                sectionBkgColor: '#e8ebf7',
                sectionBkgColor2: '#f4f6fb'
              },
              themeCSS: `
                .nodeLabel {
                  font-family: 'Roboto', sans-serif;
                  text-align: center !important;
                  vertical-align: middle !important;
                }
                .nodeLabel > p,
                .edgeLabel > p {
                  margin: 2px;
                  padding: 4px;
                  font-weight: 500;
                }

                .edgeLabel > p {
                  color: white;
                }
          
                /* Simulate h2 underline style */
                .label text {
                  font-family: 'Roboto Slab', serif;
                  text-align: center;
                  vertical-align: middle;
                }
                .clusterLabel text {
                  font-family: 'Roboto Slab', serif;
                  fill: #1a3a6e;
                  font-weight: bold;
                  border-bottom: 2px solid #1a3a6e;
                }

            
                .node.important rect {
                  stroke: #d62828;
                  fill: #fbecec;
                }
              `
            });
          </script>
          EOF
                tail -n +"$((second_delim_line + 1))" "$file" >> "$tmp_file"
                mv "$tmp_file" "$file"
                echo "Script do Mermaid injetado em $file"
              else
                echo "Arquivo $file não possui segundo '---', pulando..."
              fi
            else
              echo "Arquivo $file não contém 'mermaid', pulando..."
            fi
          done
        shell: bash

      # ---------- 1. Compilar com Marp via NPX ----------
      - name: Instalar dependências Node.js
        run: |
          echo "Instalando Node.js..."
          sudo apt-get update -y
          sudo apt-get install -y nodejs npm

      - name: Converter Markdown para slides HTML com Marp
        run: |
          echo "Convertendo arquivos .md em ./turmas para slides HTML com tema ./global/slide.css"
          npx @marp-team/marp-cli ./turmas --html --theme ./global/slide.css --allow-local-files 
        shell: bash

      # ---------- 2. Deploy para GCP ----------
      - name: Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configurar gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Testar conexão com a VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="echo Conexão bem-sucedida"
            
      - name: Copiar arquivos para a VM (para /tmp)
        run: |
          gcloud compute scp --recurse ./* \
            ${{ secrets.GCP_INSTANCE_NAME }}:/tmp/deploy \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Mover arquivos para /var/www/html/efg
        run: |
          gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="sudo cp -r /tmp/deploy/* /var/www/html/efg/"